{"version":3,"sources":["utils.js","components/Post/index.js","components/Post/Post.jsx","components/Main/index.js","components/Main/Main.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["redditRequest","a","subreddit","page","fetch","response","json","Post","handleSelect","post","selected","h","w","useState","showTitle","setShowTitle","className","borderWidth","borderRadius","overflow","m","objectFit","onClick","style","border","id","position","onMouseEnter","onMouseLeave","color","bgColor","p","title","src","thumbnail","alt","fallbackSrc","Main","useParams","history","useHistory","posts","setPosts","next","setNext","prev","setPrev","setPage","loading","setLoading","visible","setVisible","setSelected","useEffect","catch","err","console","log","data","after","postKeys","children","reduce","result","c","postObj","over_18","key","push","getPosts","newSelected","direction","justify","alignItems","width","height","align","label","to","icon","Star","placeholder","variant","onKeyDown","e","target","value","handleSearch","ArrowLeft","ArrowRight","templateColumns","map","as","px","ViewOff","View","Delete","Object","keys","s","display","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","dotenv","config","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.cfa16150.chunk.js","sourcesContent":["export default async function redditRequest(subreddit='pics', page='') {\r\n  const response = await fetch(`https://www.reddit.com/r/${subreddit}.json?after=${page}`,\r\n    // {  method: 'GET',\r\n    //   headers: { 'Content-Type': 'application/json' },\r\n    // mode: 'no-cors',\r\n    // credentials: \"include\"\r\n    // }\r\n  );\r\n\r\n\r\n  return await response.json()\r\n}\r\n","import Post from './Post';\r\nexport default Post;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './post.css';\r\nimport { Flex, Box, Image, Spacer, Text } from '@chakra-ui/react';\r\n\r\nexport default function Post({ handleSelect, post, selected, h = '100px', w='auto' }) {\r\n  const [showTitle, setShowTitle] = useState(false);\r\n\r\n  const handleStyle = () => {\r\n    const selectedStyle = {\r\n      borderColor: '#000000',\r\n      borderWidth: '10px',\r\n    };\r\n\r\n    return selectedStyle;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        className=\"post\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        overflow=\"hidden\"\r\n        h={h}\r\n        w={w}\r\n        m=\"6\"\r\n        objectFit=\"cover\"\r\n        onClick={() => handleSelect(post)}\r\n        style={{\r\n          border: `${selected[post.id] ? '5px solid white' : '5px solid black'}`,\r\n        }}\r\n        position=\"relative\"\r\n      >\r\n        <Box\r\n          position=\"absolute\"\r\n          h=\"100%\"\r\n          w=\"100%\"\r\n          objectFit=\"contain\"\r\n          onMouseEnter={() => setShowTitle(true)}\r\n          onMouseLeave={() => setShowTitle(false)}\r\n        >\r\n          {showTitle && (\r\n            <Text color=\"#FFFFFF\" bgColor=\"#00000050\" h=\"100%\" w=\"100%\" p=\"2\" overflow=\"auto\">\r\n              {post.title}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n        <Image\r\n          src={post.thumbnail}\r\n          alt={post.title}\r\n          w=\"100%\"\r\n          h=\"100%\"\r\n          objectFit=\"cover\"\r\n          fallbackSrc=\"https://via.placeholder.com/150\"\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import Main from './Main';\r\nexport default Main;\r\n","import React, { useEffect, useState } from 'react';\r\nimport redditRequest from '../../utils';\r\nimport Post from '../Post';\r\nimport './main.css';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  GridItem,\r\n  Spinner,\r\n  IconButton,\r\n  Flex,\r\n  Center,\r\n  Text,\r\n  List,\r\n  ListItem,\r\n  Image,\r\n  Tooltip,\r\n  Input,\r\n  Heading,\r\n} from '@chakra-ui/react';\r\nimport { Route, Switch, Link, useParams, useHistory } from 'react-router-dom';\r\nimport {\r\n  ArrowRightIcon,\r\n  ArrowLeftIcon,\r\n  ViewIcon,\r\n  ViewOffIcon,\r\n  StarIcon,\r\n  DeleteIcon,\r\n} from '@chakra-ui/icons';\r\n\r\nexport default function Main() {\r\n  let { subreddit } = useParams();\r\n  const history = useHistory();\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  const [next, setNext] = useState('');\r\n  const [prev, setPrev] = useState('');\r\n  const [page, setPage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [visible, setVisible] = useState(true);\r\n  const [selected, setSelected] = useState({});\r\n\r\n  useEffect(() => {\r\n    // get the Posts\r\n    const getPosts = async () => {\r\n      const { data: response } = await redditRequest(subreddit, page).catch(\r\n        (err) => {\r\n          console.log(err);\r\n        }\r\n      );\r\n\r\n      // set loading/error messages if needed\r\n\r\n      if (response) {\r\n        setNext(response.after);\r\n\r\n        const postKeys = ['id', 'author', 'title', 'created', 'thumbnail'];\r\n        // reduce the data to be sfw\r\n        const posts = response.children.reduce((result, c) => {\r\n          // parse out unnecessary data\r\n          const postObj = {};\r\n\r\n          if (c.data.over_18 !== 'image') {\r\n            for (const key of postKeys) {\r\n              postObj[key] = c.data[key];\r\n            }\r\n            result.push(postObj);\r\n          }\r\n          return result;\r\n        }, []);\r\n\r\n        setPosts(posts);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // call the function\r\n    getPosts();\r\n  }, [subreddit, page]);\r\n\r\n  const renderThis = () => {\r\n    return posts.map((p) => (\r\n      <GridItem key={`post-${p.id}`}>\r\n        <Post handleSelect={handleSelect} post={p} selected={selected} />\r\n      </GridItem>\r\n    ));\r\n  };\r\n\r\n  const renderThat = () => {\r\n    return Object.keys(selected).map((s) => (\r\n      <ListItem display=\"inline-block\" key={`selected-${s}`}>\r\n        <Post\r\n          handleSelect={handleSelect}\r\n          post={selected[s]}\r\n          selected={selected}\r\n          h=\"70px\"\r\n          w=\"70px\"\r\n        />\r\n      </ListItem>\r\n    ));\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    if (e.key === 'Enter') {\r\n      history.push(`/${e.target.value}`);\r\n    }\r\n  };\r\n\r\n  const handleSelect = (post) => {\r\n    if (selected[post.id]) {\r\n      const newSelected = { ...selected };\r\n      delete newSelected[post.id];\r\n      setSelected(newSelected);\r\n    } else {\r\n      setSelected({ ...selected, [post.id]: post });\r\n      console.log(selected);\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setPrev(page || '');\r\n    setPage(next);\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    setPage(prev);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      className=\"main\"\r\n      direction=\"row\"\r\n      justify=\"center\"\r\n      alignItems=\"flex-start\"\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n    >\r\n      <Flex\r\n        className=\"main\"\r\n        width=\"70%\"\r\n        height=\"100%\"\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        align=\"center\"\r\n        bgColor=\"black\"\r\n      >\r\n        <Flex justify=\"space-around\">\r\n          <Tooltip label=\"Home\">\r\n            <Link to=\"/\">\r\n              <IconButton icon={<StarIcon />} />\r\n            </Link>\r\n          </Tooltip>\r\n\r\n          <Input\r\n            color=\"white\"\r\n            placeholder=\"Enter Subreddit Name\"\r\n            variant=\"filled\"\r\n            onKeyDown={(e) => {\r\n              handleSearch(e);\r\n            }}\r\n          />\r\n          <Tooltip label=\"Previous\">\r\n            <IconButton onClick={handlePrev} icon={<ArrowLeftIcon />} />\r\n          </Tooltip>\r\n          <Tooltip label=\"Next\">\r\n            <IconButton onClick={handleNext} icon={<ArrowRightIcon />} />\r\n          </Tooltip>\r\n        </Flex>\r\n\r\n        <Grid templateColumns=\"repeat(5, 1fr)\">\r\n          {loading ? <Spinner /> : renderThis()}\r\n        </Grid>\r\n      </Flex>\r\n\r\n\r\n      <Flex direction=\"column\" justify=\"flex-start\" align=\"center\" width=\"30%\">\r\n<Flex>\r\n          <Heading as=\"h2\" color=\"white\" px={6}>\r\n            Selected\r\n          </Heading>\r\n          <Tooltip label={visible ? 'Hide' : 'Unhide'}>\r\n            <IconButton\r\n              onClick={() => {\r\n                setVisible(visible ? false : true);\r\n              }}\r\n              icon={visible ? <ViewOffIcon /> : <ViewIcon />}\r\n            />\r\n          </Tooltip>\r\n          <Tooltip label=\"Clear\">\r\n            <IconButton\r\n              onClick={() => {\r\n                setSelected({});\r\n              }}\r\n              icon={<DeleteIcon />}\r\n            />\r\n          </Tooltip>\r\n          </Flex>\r\n          {visible && (\r\n            <Flex w=\"1fr\" h=\"auto\" align=\"center\" justify=\"center\">\r\n              <List bgColor={visible ? '#121212' : ''}>{renderThat()}</List>\r\n            </Flex>\r\n          )}\r\n\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch, useParams } from 'react-router-dom';\nimport Main from './components/Main';\nimport './App.css';\nimport {\n  Box,\n  Grid,\n  GridItem,\n  Spinner,\n  IconButton,\n  Flex,\n  Center,\n} from '@chakra-ui/react';\n\n// TODO: pass in params as route\nexport default function App() {\n  return (\n    <Flex className=\"app\" bgColor=\"#292929\" h=\"100vh\" w=\"100vw\" justify=\"center\" alignItems=\"center\">\n      <Switch>\n        <Route path=\"/:subreddit\">\n          <Main />\n        </Route>\n        <Route path=\"/\">\n          <Main />\n        </Route>\n      </Switch>\n    </Flex>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}